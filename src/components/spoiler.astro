---
// Props con valores por defecto
const { 
title = "Mostrar spoiler", 
accentColor = "#4f46e5" 
} = Astro.props;
---

<div class="spoiler">
  <button id="spoilerBtn" class="spoiler-btn">{title}</button>
  <div id="spoilerContent" class="spoiler-content hidden">
    <slot />
  </div>
</div>

<style define:vars={{ accentColor }}>
  .spoiler {
    font-family: system-ui, -apple-system, sans-serif;
    margin: 1.5rem 0;
    border-radius: 0.5rem;
    overflow: hidden;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  .spoiler-btn {
    width: 100%;
    background: var(--accentColor);
    color: white;
    border: none;
    padding: 0.75rem 1.25rem;
    cursor: pointer;
    font-weight: 600;
    font-size: 1rem;
    text-align: left;
    transition: background-color 0.3s ease;
    display: flex;
    align-items: center;
  }

  .spoiler-btn::after {
    content: "▼";
    margin-left: auto;
    font-size: 0.8rem;
    transition: transform 0.3s ease;
  }

  .spoiler-btn.active::after {
    transform: rotate(180deg);
  }

  .spoiler-btn:hover {
    background-color: color-mix(in srgb, var(--accentColor), black 10%);
  }

  .spoiler-content {
    background: #ffffff;
    padding: 1.25rem;
    border-top: none;
    border-left: 4px solid var(--accentColor);
    opacity: 1;
    max-height: 1000px;
    transition: max-height 0.3s ease, opacity 0.3s ease, padding 0.3s ease;
    overflow: hidden;
  }

  .spoiler-content.hidden {
    max-height: 0;
    opacity: 0;
    padding-top: 0;
    padding-bottom: 0;
  }

  /* Estilos para modo oscuro */
  @media (prefers-color-scheme: dark) {
    .spoiler-content {
      background: #1f2937;
      color: #e5e7eb;
    }
    .spoiler {
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }
  }
</style>

<script is:inline>
  // Este script se ejecutará en el cliente
  function setupSpoilers() {
    document.querySelectorAll('.spoiler').forEach(spoiler => {
      const button = spoiler.querySelector('.spoiler-btn');
      const content = spoiler.querySelector('.spoiler-content');
      const originalText = button.textContent;
      const hideText = "Ocultar";

      button.addEventListener('click', () => {
        const isHidden = content.classList.contains('hidden');
        content.classList.toggle('hidden');
        button.classList.toggle('active');
        button.textContent = isHidden ? hideText : originalText;
      });
    });
  }

  // Ejecutar cuando se carga la página
  document.addEventListener('DOMContentLoaded', setupSpoilers);

  // También ejecutar cuando hay cambios en el DOM (útil para MDX y navegación de Astro)
  document.addEventListener('astro:page-load', setupSpoilers);
</script>