---
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import FechaRelativa from "../../components/tsx/FechaRelativa";
import Coment from "../../icons/coment.astro";
import Header from "../../components/header.astro";
import Slidebar from "../../components/slidebar.astro";

export const getStaticPaths = (async ({ paginate }) => {
  const articles = (await getCollection('articles'))
    .filter(article => article.data.categoryName === 'anime')
    .sort((a, b) => {
      const dateA = new Date(a.data.publishDate!).getTime();
      const dateB = new Date(b.data.publishDate!).getTime();
      return dateB - dateA;
    });

  return paginate(articles, { pageSize: 2 });
}) satisfies GetStaticPaths;

const { page } = Astro.props;
const title = 'Anime';

function truncateText(text: string, maxLength = 100) {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
}

export const prerender = true;
---

<Layout title={title}>
  <Header/>
  <main class="flex flex-col lg:flex-row justify-between gap-10 max-w-[1350px] m-auto mt-20">
    <section>
      {page.data.map(article => {
        const { slug, data } = article;
        const { title, img, description, categoryName, publishDate } = data;
          return (
          <div class="flex flex-col md:flex-row mb-12 rounded-lg transition-shadow duration-300 overflow-hidden">
            <div class="md:w-1/3">
              <a href={`/noticias/${slug}`}>
                <img src={img} alt={title} class="w-[275px] h-[200px] rounded-[5px] object-cover" />
              </a>
            </div>
            <div class="pl-4 pt-1 md:w-2/3">
              <span class="inline-block text-purple-800 rounded-full text-sm font-medium">{categoryName}</span>
              <h3 class="text-2xl font-bold mb-1 text-white/80">{title}</h3>
              <p class="text-gray-600 mb-4">{truncateText(description)}</p>
              <div class="flex items-center text-gray-500 text-sm">
                <Coment class="w-5 h-5 mr-1" />
                <span class="mr-4">42 comentarios</span>
                <FechaRelativa fechaISO={publishDate!.toISOString()} client:load />
              </div>
            </div>
          </div>
        );
      })}
    </section>
  <Slidebar/>
          
          
  </main>
  <section class="container mx-auto px-4 py-2">
    <div class="flex flex-wrap justify-center gap-2 sm:gap-4 my-4">
      {/* Botón Anterior */}
      {page.url.prev ? (
        <a href={page.url.prev} class="px-3 py-1 sm:px-4 sm:py-2 bg-blue-500 text-white text-sm sm:text-base rounded hover:bg-blue-600 transition-colors">Anterior</a>
      ) : (
        <span class="px-3 py-1 sm:px-4 sm:py-2 bg-gray-300 text-gray-500 text-sm sm:text-base rounded cursor-not-allowed">Anterior</span>
      )}
      
      {/* Números de página */}
      <div class="flex items-center gap-1 sm:gap-2">
        {Array.from({ length: page.lastPage }, (_, i) => i + 1).map((pageNum) => (
          pageNum === page.currentPage ? (
            <span class="px-3 py-1 sm:px-4 sm:py-2 bg-blue-700 text-white text-sm sm:text-base rounded">
              {pageNum}
            </span>
          ) : (
            <a 
              href={pageNum === 1 ? `/anime/1` : `/anime/${pageNum}`}
              class="px-3 py-1 sm:px-4 sm:py-2 bg-blue-500 text-white text-sm sm:text-base rounded hover:bg-blue-600 transition-colors"
            >
              {pageNum}
            </a>
          )
        ))}
      </div>
      
      {/* Botón Siguiente */}
      {page.url.next ? (
        <a href={page.url.next} class="px-3 py-1 sm:px-4 sm:py-2 bg-blue-500 text-white text-sm sm:text-base rounded hover:bg-blue-600 transition-colors">Siguiente</a>
      ) : (
        <span class="px-3 py-1 sm:px-4 sm:py-2 bg-gray-300 text-gray-500 text-sm sm:text-base rounded cursor-not-allowed">Siguiente</span>
      )}
    </div>
  </section>
</Layout>